# -*- coding: utf-8 -*-
# Generated by Django 1.11.8 on 2018-12-03 22:40
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='EndUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326, verbose_name='موقعیت بنگاه')),
                ('is_citizen', models.BooleanField(default=True, verbose_name='مشاور املاک عادی')),
                ('is_expert', models.BooleanField(default=False, verbose_name='مشاور املاک ویژه')),
                ('is_admin', models.BooleanField(default=False, verbose_name='شرکت مادر تخصصی')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'users',
                'abstract': False,
                'verbose_name': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='County',
            fields=[
                ('county_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='کد شهرستان')),
                ('name', models.CharField(max_length=50, verbose_name='نام شهرستان')),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, verbose_name='محدوده جغرافیایی')),
            ],
            options={
                'verbose_name_plural': 'شهرستان ها',
                'verbose_name': 'َشهرستان',
            },
        ),
        migrations.CreateModel(
            name='PostalCode',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('postalcode', models.CharField(default='', editable=False, max_length=5, verbose_name='کدپستی')),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=32639, verbose_name='محدوده جغرافیایی')),
            ],
            options={
                'verbose_name_plural': 'کدهای پستی',
                'verbose_name': 'کد پستی',
            },
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contract_code', models.CharField(max_length=8, verbose_name='کد قرارداد')),
                ('contract_type', models.PositiveSmallIntegerField(choices=[(1, 'مبایعه نامه'), (2, 'وکالت')], verbose_name='نوع قرارداد')),
                ('property_type', models.PositiveSmallIntegerField(choices=[(1, 'آپارتمان'), (2, 'زمین')], verbose_name='نوع ملک')),
                ('region', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='منطقه')),
                ('landuse', models.PositiveSmallIntegerField(choices=[(1, 'مسکونی'), (2, 'تجاری')], verbose_name='کاربری')),
                ('area', models.FloatField(verbose_name='مساحت')),
                ('percentage', models.FloatField(verbose_name='درصد')),
                ('price', models.FloatField(verbose_name='قیمت')),
                ('price_per', models.FloatField(verbose_name='قیمت هر متر مربع')),
                ('building_age', models.SmallIntegerField(verbose_name='قدمت بنا')),
                ('structure_type', models.SmallIntegerField(choices=[(0, 'بدون اسکلت'), (1, 'بتونی'), (2, 'فلزی'), (3, 'بتونی و فلزی'), (4, 'بتونی و فلزی'), (4, 'آجر یا بلوک سیمانی'), (5, 'چوب')], verbose_name='نوع سازه')),
                ('recorded_date', models.DateField(verbose_name='تاریخ ثبت قرارداد')),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326, verbose_name='موقعیت جغرافیایی')),
                ('county', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='property.County', verbose_name='شهرستان')),
                ('postal_code', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='property.PostalCode')),
            ],
            options={
                'verbose_name_plural': 'املاک',
                'verbose_name': 'ملک',
            },
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('province_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='کد استان')),
                ('name', models.CharField(max_length=50, verbose_name='نام')),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, verbose_name='محدوده جغرافیایی')),
            ],
            options={
                'verbose_name_plural': 'استان ها',
                'verbose_name': 'استان',
            },
        ),
        migrations.AddField(
            model_name='property',
            name='province',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='property.Province', verbose_name='استان'),
        ),
        migrations.AddField(
            model_name='property',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='مشاور'),
        ),
        migrations.AddField(
            model_name='county',
            name='province',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='property.Province', verbose_name='استان'),
        ),
    ]
